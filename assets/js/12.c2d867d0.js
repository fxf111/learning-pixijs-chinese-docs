(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{215:function(t,r,a){"use strict";a.r(r);var e=a(28),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("英文教程原作者"),a("a",{attrs:{href:"http://www.yeahbutisitflash.com/?author=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Christopher"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://twitter.com/intent/follow?screen_name=chriscaleb",target:"_blank",rel:"noopener noreferrer"}},[t._v("关注他@chriscaleb"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("本系列教程已经针对"),a("a",{attrs:{href:"http://www.pixijs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PixiJS v4"),a("OutboundLink")],1),t._v("进行了更新。")]),t._v(" "),a("p",[t._v("欢迎回到本系列教程的第三部分，本系列将介绍如何使用JavaScript和pixi.js制作视差滚动地图。到目前为止已经介绍了很多。在第一个教程中，您学习了一些pixi.js基础知识，并将视差滚动应用到几个重复的层中。而在第二部分中，通过向代码库应用一些面向对象的概念，将现有的滚动功能包装到它自己的类中。现在我们将专注于第三个更复杂的视差层.")]),t._v(" "),a("h2",{attrs:{id:"你将会学到"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你将会学到"}},[t._v("#")]),t._v(" 你将会学到...")]),t._v(" "),a("ul",[a("li",[t._v("使用纹理和精灵表单（sprite sheets）")]),t._v(" "),a("li",[t._v("对象池（object pooling）的基础知识")])]),t._v(" "),a("h2",{attrs:{id:"你应该了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你应该了解"}},[t._v("#")]),t._v(" 你应该了解...")]),t._v(" "),a("ul",[a("li",[t._v("熟悉pixi.js基础知识")]),t._v(" "),a("li",[t._v("了解JavaScript或ActionScript")]),t._v(" "),a("li",[t._v("基本的面向对象概念")])]),t._v(" "),a("p",[t._v("我们继续做上节教程未完成的部分。您可以使用在前两个教程中生成的代码，也可以从GitHub下载"),a("a",{attrs:{href:"https://github.com/ccaleb/pixi-parallax-scroller/tree/master/tutorial-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("第二个教程的源代码"),a("OutboundLink")],1),t._v("并在那里工作。您还可以在GitHub上找到本教程"),a("a",{attrs:{href:"https://github.com/ccaleb/pixi-parallax-scroller/tree/master/tutorial-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("第三部分的全部源代码"),a("OutboundLink")],1),t._v("，不过我还是鼓励您按照本教程中详细介绍的步骤来操作，并且只有在遇到问题时才会参考源代码。")]),t._v(" "),a("p",[t._v("本系列教程的灵感来自于《Cannabalt》和《Monster Dash》等无尽的奔跑游戏，这两款游戏都很好地利用了视差滚动。玩家操作英雄奔跑和跳跃时，视差滚动提供了令人眼花缭乱的深度错觉。")]),t._v(" "),a("p",[t._v("在接下来的两个教程中，我们将构建一个与Monster Dash中非常相似的滚动游戏地图。 Monster Dash的游戏地图是根据一系列宽度和高度不同的墙跨度构建的。 游戏的目的是通过跨墙跳来尽可能长地生存。 游戏地图的滚动速度会随着时间增加而增加。")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.yeahbutisitflash.com/pixi-parallax-scroller/final/index.html"}},[a("img",{attrs:{src:"/scroller/ps-tut1-screenshot1.png",alt:""}})])]),t._v(" "),a("p",[t._v("点击上图，即可查看本节教程的demo。")]),t._v(" "),a("h2",{attrs:{id:"开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始"}},[t._v("#")]),t._v(" 开始")]),t._v(" "),a("p",[t._v("如果您还没有通过前两个教程，那么我建议您先完成它们。第一个教程可以在"),a("RouterLink",{attrs:{to:"/guide/parallax-scroller/part-1.html"}},[t._v("这里")]),t._v("找到，第二个教程可以在"),a("RouterLink",{attrs:{to:"/guide/parallax-scroller/part-2.html"}},[t._v("这里")]),t._v("找到。")],1),t._v(" "),a("p",[t._v("在本教程中，我们将使用一些新的图形资源。我已经为了提供了一个zip文件，你可以在"),a("a",{attrs:{href:"www.yeahbutisitflash.com/pixi-parallax-scroller/tutorial-3/resources.zip"}},[t._v("www.yeahbutisitflash.com/pixi-parallax-scroller/tutorial-3/resources.zip")]),t._v("这里下载。下载此文件并将它解压缩到项目的"),a("code",[t._v("resources")]),t._v("文件夹中。")]),t._v(" "),a("p",[t._v("如果你用的windows，那么"),a("code",[t._v("resources")]),t._v("文件夹应该是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/scroller/ps-tut3-screenshot1.png",alt:""}})]),t._v(" "),a("p",[t._v("Mac下则应该是这样的：\n"),a("img",{attrs:{src:"/scroller/ps-tut3-screenshot2.png",alt:""}})]),t._v(" "),a("p",[t._v("另外，请记住，为了测试您的工作，您需要运行一个本地web服务器。如果您还没有这样做，请参阅第一篇教程的"),a("RouterLink",{attrs:{to:"/guide/parallax-scroller/part-1.html#入门"}},[t._v("入门")]),t._v("部分，了解关于如何设置web服务器的详细信息。")],1),t._v(" "),a("p",[t._v("值得注意的是，本教程比前两篇要长。你可能需要留出大约两个小时来完成它。")]),t._v(" "),a("h2",{attrs:{id:"游戏地图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#游戏地图"}},[t._v("#")]),t._v(" 游戏地图")]),t._v(" "),a("p",[t._v("从上面的演示中可以看到，墙跨的宽度和高度是不同的。每个跨度由一系列的窗户和墙壁装饰组成。墙壁装饰本身是由管道和通风口组成的。")]),t._v(" "),a("p",[t._v("所以墙内是如何构成的?那么每个跨度都是由一系列缝合在一起的垂直切片构建而成的。 每个切片的大小为64 x 256像素。 下图显示了跨度示例。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/scroller/diagram-1.png",alt:""}})]),t._v(" "),a("p",[t._v("墙跨的高度是通过垂直移动每个切片的位置来实现的。你可以在下面的图表中看到，第二面墙的切片部分位于视口的可视区域之下，给人的感觉是它比第一面墙低。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/scroller/diagram-2.png",alt:""}})]),t._v(" "),a("p",[t._v("在大多数情况下，墙跨内的每个切片将位于相同的垂直位置以产生完美的平面。 但是，有一个例外。 Monster Dash具有阶梯状的墙跨度，可让玩家掉落到正下方的表面上。 它是这样生成的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/scroller/diagram-3.png",alt:""}})]),t._v(" "),a("p",[t._v("如果你仔细看看上面的图表，你会注意到我们这里实际上有两个跨墙(第一个跨墙比第二个跨墙高)，由中间代表台阶的一个薄片连接。")]),t._v(" "),a("p",[t._v("您可能会惊讶于我们的整个游戏地图将仅由八种不同类型的垂直切片构成！ 您可以在下面看到这八个：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/scroller/diagram-4.png",alt:""}})]),t._v(" "),a("p",[t._v("在墙跨度内这些切片的顺序很重要。 让我们进一步谈谈。")]),t._v(" "),a("h2",{attrs:{id:"墙跨度（间距）的解剖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#墙跨度（间距）的解剖"}},[t._v("#")]),t._v(" 墙跨度（间距）的解剖")]),t._v(" "),a("p",[t._v("典型的墙跨由三个主要部分组成：")]),t._v(" "),a("ul",[a("li",[t._v("前边(a front edge)")]),t._v(" "),a("li",[t._v("中间部分(a mid section)")]),t._v(" "),a("li",[t._v("后边(a back edge)")])]),t._v(" "),a("p",[t._v("前边由单个垂直切片表示。后面的边也是。然而中间的部分可以由一个或多个切片组成。切片越多，特定的墙跨度就会越长。在我们正在进行的演示中，我们将包括一些跨越30多个切片的墙壁。下图会进一步说明墙跨的三个主要部分。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/scroller/diagram-5.png",alt:""}})]),t._v(" "),a("p",[t._v("墙壁的中间部分由以下两部分连接：")]),t._v(" "),a("ul",[a("li",[t._v("窗户")]),t._v(" "),a("li",[t._v("墙的装饰")])]),t._v(" "),a("p",[t._v("因此，一堵墙的中间部分（分为6段）的结构应如下所示：")]),t._v(" "),a("p",[a("code",[t._v("窗户, 装饰, 窗户, 装饰, 窗户, 装饰")])]),t._v(" "),a("p",[t._v("墙跨的中间部分的长度将不均匀，以确保我们从窗户开始和结束。因此，在上面的例子中，不是6片长，我们实际上有一个7片长的中间部分：\n"),a("code",[t._v("窗户, 装饰, 窗户, 装饰, 窗户, 装饰，窗户")])]),t._v(" "),a("p",[t._v("为了让墙壁在视觉上尽可能有趣，窗户(windows)可以是亮的，也可以是暗的，我们可以随机选择三种不同的墙壁装饰(decorations)。因此，一堵墙的中段将由五种不同类型的垂直切片组成。")]),t._v(" "),a("p",[t._v("为了增加多样性，在确定墙跨的前边缘(front edge)时，我们将从两种垂直切片中进行选择。 墙的后边缘(end edge)将从与前面相同的两个切片类型中选择，只有我们将水平翻转该切片，以使其正确地连接到跨度的末端。 阶梯墙很少出现，因此在将阶梯(step)放入墙跨中时将仅使用一种垂直切片。")]),t._v(" "),a("p",[t._v("为了澄清所有这些问题，这里再次列出了所有八个切片类型，但是这次我标记了每个切片的用途：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/scroller/diagram-6-1024x531.png",alt:""}})]),t._v(" "),a("p",[t._v("在本教程中，有必要在单独的选项卡中打开上面的图并参考它。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("不要将垂直切片类型数量与用于构建特定墙壁跨度的垂直切片数量相混淆。例如，一堵墙可以跨越30个垂直的切片，但实际上只由8种垂直的切片构成。")])]),t._v(" "),a("h2",{attrs:{id:"精灵表格（sprite-sheets）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精灵表格（sprite-sheets）"}},[t._v("#")]),t._v(" 精灵表格（SPRITE SHEETS）")]),t._v(" "),a("p",[t._v("如前所述，我们的墙跨度是由八种不同类型的墙切片构建的。 在我们的项目中表示这些切片的最直观的方法是为每个片创建一个单独的PNG文件。尽管这是一种处理方式，但实际上我们会将所有切片添加到一个叫做精灵表格的PNG文件中。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("精灵图表也经常被称为纹理贴图集。在本教程中，我们使用精灵图表这个名称")])]),t._v(" "),a("p",[t._v("我已经在本教程的"),a("code",[t._v("resources.zip")]),t._v("文件中为您提供了精灵表格。它是一个名为"),a("code",[t._v("wall.png")]),t._v("的文件，如下所示。正如您所看到的，所有8个切片都被打包到一个位图中。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/scroller/sprite-sheet.png",alt:""}})]),t._v(" "),a("p",[a("code",[t._v("resources")]),t._v("文件中，还有一个精灵表格附带的文件"),a("code",[t._v("wall.json")]),t._v("。将其加载到文本编辑器中并查看。这个文件使用JSON数据格式来定义精灵表格中独立的位图切片的名称和位置。当使用sprite表格时，它里面的每个单独的位图被称为一个帧。")])])}),[],!1,null,null,null);r.default=s.exports}}]);